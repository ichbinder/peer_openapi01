//
// VideoRatesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoRatesAPI {
    /**
     Get rate of my user for a video
     
     - parameter videoId: (path) The video id  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeVideosVideoIdRatingGet(videoId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMeVideoRating?, _ error: Error?) -> Void)) {
        usersMeVideosVideoIdRatingGetWithRequestBuilder(videoId: videoId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get rate of my user for a video
     - GET /users/me/videos/{videoId}/rating
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter videoId: (path) The video id  
     - returns: RequestBuilder<GetMeVideoRating> 
     */
    open class func usersMeVideosVideoIdRatingGetWithRequestBuilder(videoId: String) -> RequestBuilder<GetMeVideoRating> {
        var path = "/users/me/videos/{videoId}/rating"
        let videoIdPreEscape = "\(APIHelper.mapValueToPathItem(videoId))"
        let videoIdPostEscape = videoIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{videoId}", with: videoIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetMeVideoRating>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Like/dislike a video
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdRatePut(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdRatePutWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Like/dislike a video
     - PUT /videos/{id}/rate
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdRatePutWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<Void> {
        var path = "/videos/{id}/rate"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
