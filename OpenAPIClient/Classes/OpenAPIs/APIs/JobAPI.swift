//
// JobAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class JobAPI {
    /**
     * enum for parameter state
     */
    public enum State_jobsStateGet: String, CaseIterable {
        case empty = ""
        case active = "active"
        case completed = "completed"
        case failed = "failed"
        case waiting = "waiting"
        case delayed = "delayed"
    }

    /**
     * enum for parameter jobType
     */
    public enum JobType_jobsStateGet: String, CaseIterable {
        case activitypubFollow = "activitypub-follow"
        case activitypubHttpBroadcast = "activitypub-http-broadcast"
        case activitypubHttpFetcher = "activitypub-http-fetcher"
        case activitypubHttpUnicast = "activitypub-http-unicast"
        case email = "email"
        case videoTranscoding = "video-transcoding"
        case videoFileImport = "video-file-import"
        case videoImport = "video-import"
        case videosViews = "videos-views"
        case activitypubRefresher = "activitypub-refresher"
        case videoRedundancy = "video-redundancy"
        case videoLiveEnding = "video-live-ending"
    }

    /**
     List instance jobs
     
     - parameter state: (path) The state of the job (&#39;&#39; for for no filter) 
     - parameter jobType: (query) job type (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jobsStateGet(state: State_jobsStateGet, jobType: JobType_jobsStateGet? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200?, _ error: Error?) -> Void)) {
        jobsStateGetWithRequestBuilder(state: state, jobType: jobType, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List instance jobs
     - GET /jobs/{state}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter state: (path) The state of the job (&#39;&#39; for for no filter) 
     - parameter jobType: (query) job type (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func jobsStateGetWithRequestBuilder(state: State_jobsStateGet, jobType: JobType_jobsStateGet? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse200> {
        var path = "/jobs/{state}"
        let statePreEscape = "\(state.rawValue)"
        let statePostEscape = statePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{state}", with: statePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "jobType": jobType?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
