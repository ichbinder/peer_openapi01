//
// VideoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoAPI {
    /**
     * enum for parameter nsfw
     */
    public enum Nsfw_accountsNameVideosGet: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_accountsNameVideosGet: String, CaseIterable {
        case local = "local"
        case allLocal = "all-local"
    }

    /**
     * enum for parameter skipCount
     */
    public enum SkipCount_accountsNameVideosGet: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_accountsNameVideosGet: String, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
    }

    /**
     List videos of an account
     
     - parameter name: (path) The username or handle of the account 
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get)) (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter filter: (query) Special filters which might require special rights:  * &#x60;local&#x60; - only videos local to the instance  * &#x60;all-local&#x60; - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * &#x60;all&#x60; - all videos, showing private and unlisted videos (requires Admin privileges)  (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort videos by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountsNameVideosGet(name: String, categoryOneOf: OneOfintegerarray? = nil, tagsOneOf: OneOfstringarray? = nil, tagsAllOf: OneOfstringarray? = nil, licenceOneOf: OneOfintegerarray? = nil, languageOneOf: OneOfstringarray? = nil, nsfw: Nsfw_accountsNameVideosGet? = nil, filter: Filter_accountsNameVideosGet? = nil, skipCount: SkipCount_accountsNameVideosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_accountsNameVideosGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoListResponse?, _ error: Error?) -> Void)) {
        accountsNameVideosGetWithRequestBuilder(name: name, categoryOneOf: categoryOneOf, tagsOneOf: tagsOneOf, tagsAllOf: tagsAllOf, licenceOneOf: licenceOneOf, languageOneOf: languageOneOf, nsfw: nsfw, filter: filter, skipCount: skipCount, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List videos of an account
     - GET /accounts/{name}/videos
     - parameter name: (path) The username or handle of the account 
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get)) (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter filter: (query) Special filters which might require special rights:  * &#x60;local&#x60; - only videos local to the instance  * &#x60;all-local&#x60; - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * &#x60;all&#x60; - all videos, showing private and unlisted videos (requires Admin privileges)  (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort videos by criteria (optional)
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func accountsNameVideosGetWithRequestBuilder(name: String, categoryOneOf: OneOfintegerarray? = nil, tagsOneOf: OneOfstringarray? = nil, tagsAllOf: OneOfstringarray? = nil, licenceOneOf: OneOfintegerarray? = nil, languageOneOf: OneOfstringarray? = nil, nsfw: Nsfw_accountsNameVideosGet? = nil, filter: Filter_accountsNameVideosGet? = nil, skipCount: SkipCount_accountsNameVideosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_accountsNameVideosGet? = nil) -> RequestBuilder<VideoListResponse> {
        var path = "/accounts/{name}/videos"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "categoryOneOf": categoryOneOf?.encodeToJSON(),
            "tagsOneOf": tagsOneOf?.encodeToJSON(),
            "tagsAllOf": tagsAllOf?.encodeToJSON(),
            "licenceOneOf": licenceOneOf?.encodeToJSON(),
            "languageOneOf": languageOneOf?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "skipCount": skipCount?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter nsfw
     */
    public enum Nsfw_videoChannelsChannelHandleVideosGet: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_videoChannelsChannelHandleVideosGet: String, CaseIterable {
        case local = "local"
        case allLocal = "all-local"
    }

    /**
     * enum for parameter skipCount
     */
    public enum SkipCount_videoChannelsChannelHandleVideosGet: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_videoChannelsChannelHandleVideosGet: String, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
    }

    /**
     List videos of a video channel
     
     - parameter channelHandle: (path) The video channel handle 
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get)) (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter filter: (query) Special filters which might require special rights:  * &#x60;local&#x60; - only videos local to the instance  * &#x60;all-local&#x60; - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * &#x60;all&#x60; - all videos, showing private and unlisted videos (requires Admin privileges)  (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort videos by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoChannelsChannelHandleVideosGet(channelHandle: String, categoryOneOf: OneOfintegerarray? = nil, tagsOneOf: OneOfstringarray? = nil, tagsAllOf: OneOfstringarray? = nil, licenceOneOf: OneOfintegerarray? = nil, languageOneOf: OneOfstringarray? = nil, nsfw: Nsfw_videoChannelsChannelHandleVideosGet? = nil, filter: Filter_videoChannelsChannelHandleVideosGet? = nil, skipCount: SkipCount_videoChannelsChannelHandleVideosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_videoChannelsChannelHandleVideosGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoListResponse?, _ error: Error?) -> Void)) {
        videoChannelsChannelHandleVideosGetWithRequestBuilder(channelHandle: channelHandle, categoryOneOf: categoryOneOf, tagsOneOf: tagsOneOf, tagsAllOf: tagsAllOf, licenceOneOf: licenceOneOf, languageOneOf: languageOneOf, nsfw: nsfw, filter: filter, skipCount: skipCount, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List videos of a video channel
     - GET /video-channels/{channelHandle}/videos
     - parameter channelHandle: (path) The video channel handle 
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get)) (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter filter: (query) Special filters which might require special rights:  * &#x60;local&#x60; - only videos local to the instance  * &#x60;all-local&#x60; - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * &#x60;all&#x60; - all videos, showing private and unlisted videos (requires Admin privileges)  (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort videos by criteria (optional)
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func videoChannelsChannelHandleVideosGetWithRequestBuilder(channelHandle: String, categoryOneOf: OneOfintegerarray? = nil, tagsOneOf: OneOfstringarray? = nil, tagsAllOf: OneOfstringarray? = nil, licenceOneOf: OneOfintegerarray? = nil, languageOneOf: OneOfstringarray? = nil, nsfw: Nsfw_videoChannelsChannelHandleVideosGet? = nil, filter: Filter_videoChannelsChannelHandleVideosGet? = nil, skipCount: SkipCount_videoChannelsChannelHandleVideosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_videoChannelsChannelHandleVideosGet? = nil) -> RequestBuilder<VideoListResponse> {
        var path = "/video-channels/{channelHandle}/videos"
        let channelHandlePreEscape = "\(APIHelper.mapValueToPathItem(channelHandle))"
        let channelHandlePostEscape = channelHandlePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{channelHandle}", with: channelHandlePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "categoryOneOf": categoryOneOf?.encodeToJSON(),
            "tagsOneOf": tagsOneOf?.encodeToJSON(),
            "tagsAllOf": tagsAllOf?.encodeToJSON(),
            "licenceOneOf": licenceOneOf?.encodeToJSON(),
            "languageOneOf": languageOneOf?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "skipCount": skipCount?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List available video categories
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosCategoriesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        videosCategoriesGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available video categories
     - GET /videos/categories
     - returns: RequestBuilder<[String]> 
     */
    open class func videosCategoriesGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/videos/categories"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter nsfw
     */
    public enum Nsfw_videosGet: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_videosGet: String, CaseIterable {
        case local = "local"
        case allLocal = "all-local"
    }

    /**
     * enum for parameter skipCount
     */
    public enum SkipCount_videosGet: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_videosGet: String, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
    }

    /**
     List videos
     
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get)) (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter filter: (query) Special filters which might require special rights:  * &#x60;local&#x60; - only videos local to the instance  * &#x60;all-local&#x60; - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * &#x60;all&#x60; - all videos, showing private and unlisted videos (requires Admin privileges)  (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort videos by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosGet(categoryOneOf: OneOfintegerarray? = nil, tagsOneOf: OneOfstringarray? = nil, tagsAllOf: OneOfstringarray? = nil, licenceOneOf: OneOfintegerarray? = nil, languageOneOf: OneOfstringarray? = nil, nsfw: Nsfw_videosGet? = nil, filter: Filter_videosGet? = nil, skipCount: SkipCount_videosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_videosGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoListResponse?, _ error: Error?) -> Void)) {
        videosGetWithRequestBuilder(categoryOneOf: categoryOneOf, tagsOneOf: tagsOneOf, tagsAllOf: tagsAllOf, licenceOneOf: licenceOneOf, languageOneOf: languageOneOf, nsfw: nsfw, filter: filter, skipCount: skipCount, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List videos
     - GET /videos
     - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get)) (optional)
     - parameter tagsOneOf: (query) tag(s) of the video (optional)
     - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
     - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get)) (optional)
     - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter filter: (query) Special filters which might require special rights:  * &#x60;local&#x60; - only videos local to the instance  * &#x60;all-local&#x60; - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * &#x60;all&#x60; - all videos, showing private and unlisted videos (requires Admin privileges)  (optional)
     - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort videos by criteria (optional)
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func videosGetWithRequestBuilder(categoryOneOf: OneOfintegerarray? = nil, tagsOneOf: OneOfstringarray? = nil, tagsAllOf: OneOfstringarray? = nil, licenceOneOf: OneOfintegerarray? = nil, languageOneOf: OneOfstringarray? = nil, nsfw: Nsfw_videosGet? = nil, filter: Filter_videosGet? = nil, skipCount: SkipCount_videosGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_videosGet? = nil) -> RequestBuilder<VideoListResponse> {
        let path = "/videos"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "categoryOneOf": categoryOneOf?.encodeToJSON(),
            "tagsOneOf": tagsOneOf?.encodeToJSON(),
            "tagsAllOf": tagsAllOf?.encodeToJSON(),
            "licenceOneOf": licenceOneOf?.encodeToJSON(),
            "languageOneOf": languageOneOf?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "skipCount": skipCount?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete a video
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdDelete(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a video
     - DELETE /videos/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdDeleteWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<Void> {
        var path = "/videos/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get complete video description
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdDescriptionGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) {
        videosIdDescriptionGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get complete video description
     - GET /videos/{id}/description
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<String> 
     */
    open class func videosIdDescriptionGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<String> {
        var path = "/videos/{id}/description"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a video
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoDetails?, _ error: Error?) -> Void)) {
        videosIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a video
     - GET /videos/{id}
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<VideoDetails> 
     */
    open class func videosIdGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<VideoDetails> {
        var path = "/videos/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoDetails>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update a video
     
     - parameter id: (path) The object id or uuid 
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter category: (form) Video category (optional)
     - parameter licence: (form) Video licence (optional)
     - parameter language: (form) Video language (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter name: (form) Video name (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdPut(id: OneOfintegerUUID, thumbnailfile: URL? = nil, previewfile: URL? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, privacy: VideoPrivacySet? = nil, description: String? = nil, waitTranscoding: String? = nil, support: String? = nil, nsfw: Bool? = nil, name: String? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdPutWithRequestBuilder(id: id, thumbnailfile: thumbnailfile, previewfile: previewfile, category: category, licence: licence, language: language, privacy: privacy, description: description, waitTranscoding: waitTranscoding, support: support, nsfw: nsfw, name: name, tags: tags, commentsEnabled: commentsEnabled, originallyPublishedAt: originallyPublishedAt, scheduleUpdate: scheduleUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a video
     - PUT /videos/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter category: (form) Video category (optional)
     - parameter licence: (form) Video licence (optional)
     - parameter language: (form) Video language (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter name: (form) Video name (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdPutWithRequestBuilder(id: OneOfintegerUUID, thumbnailfile: URL? = nil, previewfile: URL? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, privacy: VideoPrivacySet? = nil, description: String? = nil, waitTranscoding: String? = nil, support: String? = nil, nsfw: Bool? = nil, name: String? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/videos/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "previewfile": previewfile?.encodeToJSON(),
            "category": category?.encodeToJSON(),
            "licence": licence?.encodeToJSON(),
            "language": language?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "waitTranscoding": waitTranscoding?.encodeToJSON(),
            "support": support?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
            "commentsEnabled": commentsEnabled?.encodeToJSON(),
            "originallyPublishedAt": originallyPublishedAt?.encodeToJSON(),
            "scheduleUpdate": scheduleUpdate?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add a view to a video
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdViewsPost(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdViewsPostWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a view to a video
     - POST /videos/{id}/views
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdViewsPostWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<Void> {
        var path = "/videos/{id}/views"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set watching progress of a video
     
     - parameter id: (path) The object id or uuid 
     - parameter userWatchingVideo: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdWatchingPut(id: OneOfintegerUUID, userWatchingVideo: UserWatchingVideo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdWatchingPutWithRequestBuilder(id: id, userWatchingVideo: userWatchingVideo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set watching progress of a video
     - PUT /videos/{id}/watching
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter userWatchingVideo: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdWatchingPutWithRequestBuilder(id: OneOfintegerUUID, userWatchingVideo: UserWatchingVideo) -> RequestBuilder<Void> {
        var path = "/videos/{id}/watching"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userWatchingVideo)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Import a video
     
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter name: (form) Video name 
     - parameter torrentfile: (form) Torrent File (optional)
     - parameter targetUrl: (form) HTTP target URL (optional)
     - parameter magnetUri: (form) Magnet URI (optional)
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Video category (optional)
     - parameter licence: (form) Video licence (optional)
     - parameter language: (form) Video language (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosImportsPost(channelId: Int, name: String, torrentfile: URL? = nil, targetUrl: String? = nil, magnetUri: String? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: String? = nil, licence: String? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoUploadResponse?, _ error: Error?) -> Void)) {
        videosImportsPostWithRequestBuilder(channelId: channelId, name: name, torrentfile: torrentfile, targetUrl: targetUrl, magnetUri: magnetUri, thumbnailfile: thumbnailfile, previewfile: previewfile, privacy: privacy, category: category, licence: licence, language: language, description: description, waitTranscoding: waitTranscoding, support: support, nsfw: nsfw, tags: tags, commentsEnabled: commentsEnabled, downloadEnabled: downloadEnabled, scheduleUpdate: scheduleUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Import a video
     - POST /videos/imports
     - Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter name: (form) Video name 
     - parameter torrentfile: (form) Torrent File (optional)
     - parameter targetUrl: (form) HTTP target URL (optional)
     - parameter magnetUri: (form) Magnet URI (optional)
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Video category (optional)
     - parameter licence: (form) Video licence (optional)
     - parameter language: (form) Video language (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func videosImportsPostWithRequestBuilder(channelId: Int, name: String, torrentfile: URL? = nil, targetUrl: String? = nil, magnetUri: String? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: String? = nil, licence: String? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, scheduleUpdate: VideoScheduledUpdate? = nil) -> RequestBuilder<VideoUploadResponse> {
        let path = "/videos/imports"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "torrentfile": torrentfile?.encodeToJSON(),
            "targetUrl": targetUrl?.encodeToJSON(),
            "magnetUri": magnetUri?.encodeToJSON(),
            "channelId": channelId.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "previewfile": previewfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "category": category?.encodeToJSON(),
            "licence": licence?.encodeToJSON(),
            "language": language?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "waitTranscoding": waitTranscoding?.encodeToJSON(),
            "support": support?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "name": name.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
            "commentsEnabled": commentsEnabled?.encodeToJSON(),
            "downloadEnabled": downloadEnabled?.encodeToJSON(),
            "scheduleUpdate": scheduleUpdate?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoUploadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List available video languages
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLanguagesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        videosLanguagesGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available video languages
     - GET /videos/languages
     - returns: RequestBuilder<[String]> 
     */
    open class func videosLanguagesGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/videos/languages"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List available video licences
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLicencesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        videosLicencesGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available video licences
     - GET /videos/licences
     - returns: RequestBuilder<[String]> 
     */
    open class func videosLicencesGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/videos/licences"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a live information
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLiveIdGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveVideoResponse?, _ error: Error?) -> Void)) {
        videosLiveIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a live information
     - GET /videos/live/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<LiveVideoResponse> 
     */
    open class func videosLiveIdGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<LiveVideoResponse> {
        var path = "/videos/live/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LiveVideoResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update a live information
     
     - parameter id: (path) The object id or uuid 
     - parameter liveVideoUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLiveIdPut(id: OneOfintegerUUID, liveVideoUpdate: LiveVideoUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosLiveIdPutWithRequestBuilder(id: id, liveVideoUpdate: liveVideoUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a live information
     - PUT /videos/live/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter liveVideoUpdate: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videosLiveIdPutWithRequestBuilder(id: OneOfintegerUUID, liveVideoUpdate: LiveVideoUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/videos/live/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveVideoUpdate)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create a live
     
     - parameter channelId: (form) Channel id that will contain this live video 
     - parameter name: (form) Live video/replay name 
     - parameter saveReplay: (form)  (optional)
     - parameter permanentLive: (form) User can stream multiple times in a permanent live (optional)
     - parameter thumbnailfile: (form) Live video/replay thumbnail file (optional)
     - parameter previewfile: (form) Live video/replay preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Live video/replay category (optional)
     - parameter licence: (form) Live video/replay licence (optional)
     - parameter language: (form) Live video/replay language (optional)
     - parameter description: (form) Live video/replay description (optional)
     - parameter support: (form) A text tell the audience how to support the creator (optional)
     - parameter nsfw: (form) Whether or not this live video/replay contains sensitive content (optional)
     - parameter tags: (form) Live video/replay tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this live video/replay (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for the replay of this live (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLivePost(channelId: Int, name: String, saveReplay: Bool? = nil, permanentLive: Bool? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: String? = nil, licence: String? = nil, language: String? = nil, description: String? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoUploadResponse?, _ error: Error?) -> Void)) {
        videosLivePostWithRequestBuilder(channelId: channelId, name: name, saveReplay: saveReplay, permanentLive: permanentLive, thumbnailfile: thumbnailfile, previewfile: previewfile, privacy: privacy, category: category, licence: licence, language: language, description: description, support: support, nsfw: nsfw, tags: tags, commentsEnabled: commentsEnabled, downloadEnabled: downloadEnabled).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a live
     - POST /videos/live
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter channelId: (form) Channel id that will contain this live video 
     - parameter name: (form) Live video/replay name 
     - parameter saveReplay: (form)  (optional)
     - parameter permanentLive: (form) User can stream multiple times in a permanent live (optional)
     - parameter thumbnailfile: (form) Live video/replay thumbnail file (optional)
     - parameter previewfile: (form) Live video/replay preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Live video/replay category (optional)
     - parameter licence: (form) Live video/replay licence (optional)
     - parameter language: (form) Live video/replay language (optional)
     - parameter description: (form) Live video/replay description (optional)
     - parameter support: (form) A text tell the audience how to support the creator (optional)
     - parameter nsfw: (form) Whether or not this live video/replay contains sensitive content (optional)
     - parameter tags: (form) Live video/replay tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this live video/replay (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for the replay of this live (optional)
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func videosLivePostWithRequestBuilder(channelId: Int, name: String, saveReplay: Bool? = nil, permanentLive: Bool? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: String? = nil, licence: String? = nil, language: String? = nil, description: String? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil) -> RequestBuilder<VideoUploadResponse> {
        let path = "/videos/live"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "channelId": channelId.encodeToJSON(),
            "saveReplay": saveReplay?.encodeToJSON(),
            "permanentLive": permanentLive?.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "previewfile": previewfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "category": category?.encodeToJSON(),
            "licence": licence?.encodeToJSON(),
            "language": language?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "support": support?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "name": name.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
            "commentsEnabled": commentsEnabled?.encodeToJSON(),
            "downloadEnabled": downloadEnabled?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoUploadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List available video privacies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosPrivaciesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        videosPrivaciesGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available video privacies
     - GET /videos/privacies
     - returns: RequestBuilder<[String]> 
     */
    open class func videosPrivaciesGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/videos/privacies"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Upload a video
     
     - parameter videofile: (form) Video file 
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter name: (form) Video name 
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Video category (optional)
     - parameter licence: (form) Video licence (optional)
     - parameter language: (form) Video language (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosUploadPost(videofile: URL, channelId: Int, name: String, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: String? = nil, language: Int? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: Set<String>? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoUploadResponse?, _ error: Error?) -> Void)) {
        videosUploadPostWithRequestBuilder(videofile: videofile, channelId: channelId, name: name, thumbnailfile: thumbnailfile, previewfile: previewfile, privacy: privacy, category: category, licence: licence, language: language, description: description, waitTranscoding: waitTranscoding, support: support, nsfw: nsfw, tags: tags, commentsEnabled: commentsEnabled, downloadEnabled: downloadEnabled, originallyPublishedAt: originallyPublishedAt, scheduleUpdate: scheduleUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a video
     - POST /videos/upload
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter videofile: (form) Video file 
     - parameter channelId: (form) Channel id that will contain this video 
     - parameter name: (form) Video name 
     - parameter thumbnailfile: (form) Video thumbnail file (optional)
     - parameter previewfile: (form) Video preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Video category (optional)
     - parameter licence: (form) Video licence (optional)
     - parameter language: (form) Video language (optional)
     - parameter description: (form) Video description (optional)
     - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
     - parameter support: (form) A text tell the audience how to support the video creator (optional)
     - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
     - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
     - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
     - parameter scheduleUpdate: (form)  (optional)
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func videosUploadPostWithRequestBuilder(videofile: URL, channelId: Int, name: String, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: String? = nil, language: Int? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: Set<String>? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil) -> RequestBuilder<VideoUploadResponse> {
        let path = "/videos/upload"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "videofile": videofile.encodeToJSON(),
            "channelId": channelId.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "previewfile": previewfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "category": category?.encodeToJSON(),
            "licence": licence?.encodeToJSON(),
            "language": language?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "waitTranscoding": waitTranscoding?.encodeToJSON(),
            "support": support?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "name": name.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
            "commentsEnabled": commentsEnabled?.encodeToJSON(),
            "downloadEnabled": downloadEnabled?.encodeToJSON(),
            "originallyPublishedAt": originallyPublishedAt?.encodeToJSON(),
            "scheduleUpdate": scheduleUpdate?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoUploadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
