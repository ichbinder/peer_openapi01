//
// AbusesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AbusesAPI {
    /**
     Delete an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesAbuseIdDelete(abuseId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        abusesAbuseIdDeleteWithRequestBuilder(abuseId: abuseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an abuse
     - DELETE /abuses/{abuseId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - returns: RequestBuilder<Void> 
     */
    open class func abusesAbuseIdDeleteWithRequestBuilder(abuseId: Int) -> RequestBuilder<Void> {
        var path = "/abuses/{abuseId}"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an abuse message
     
     - parameter abuseId: (path) Abuse id 
     - parameter abuseMessageId: (path) Abuse message id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesAbuseIdMessagesAbuseMessageIdDelete(abuseId: Int, abuseMessageId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        abusesAbuseIdMessagesAbuseMessageIdDeleteWithRequestBuilder(abuseId: abuseId, abuseMessageId: abuseMessageId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an abuse message
     - DELETE /abuses/{abuseId}/messages/{abuseMessageId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter abuseMessageId: (path) Abuse message id 
     - returns: RequestBuilder<Void> 
     */
    open class func abusesAbuseIdMessagesAbuseMessageIdDeleteWithRequestBuilder(abuseId: Int, abuseMessageId: Int) -> RequestBuilder<Void> {
        var path = "/abuses/{abuseId}/messages/{abuseMessageId}"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let abuseMessageIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseMessageId))"
        let abuseMessageIdPostEscape = abuseMessageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{abuseMessageId}", with: abuseMessageIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List messages of an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesAbuseIdMessagesGet(abuseId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AbuseMessage]?, _ error: Error?) -> Void)) {
        abusesAbuseIdMessagesGetWithRequestBuilder(abuseId: abuseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List messages of an abuse
     - GET /abuses/{abuseId}/messages
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - returns: RequestBuilder<[AbuseMessage]> 
     */
    open class func abusesAbuseIdMessagesGetWithRequestBuilder(abuseId: Int) -> RequestBuilder<[AbuseMessage]> {
        var path = "/abuses/{abuseId}/messages"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AbuseMessage]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add message to an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter inlineObject13: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesAbuseIdMessagesPost(abuseId: Int, inlineObject13: InlineObject13, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        abusesAbuseIdMessagesPostWithRequestBuilder(abuseId: abuseId, inlineObject13: inlineObject13).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add message to an abuse
     - POST /abuses/{abuseId}/messages
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter inlineObject13: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func abusesAbuseIdMessagesPostWithRequestBuilder(abuseId: Int, inlineObject13: InlineObject13) -> RequestBuilder<Void> {
        var path = "/abuses/{abuseId}/messages"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject13)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update an abuse
     
     - parameter abuseId: (path) Abuse id 
     - parameter inlineObject12: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesAbuseIdPut(abuseId: Int, inlineObject12: InlineObject12? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        abusesAbuseIdPutWithRequestBuilder(abuseId: abuseId, inlineObject12: inlineObject12).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an abuse
     - PUT /abuses/{abuseId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter abuseId: (path) Abuse id 
     - parameter inlineObject12: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func abusesAbuseIdPutWithRequestBuilder(abuseId: Int, inlineObject12: InlineObject12? = nil) -> RequestBuilder<Void> {
        var path = "/abuses/{abuseId}"
        let abuseIdPreEscape = "\(APIHelper.mapValueToPathItem(abuseId))"
        let abuseIdPostEscape = abuseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{abuseId}", with: abuseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject12)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter predefinedReason
     */
    public enum PredefinedReason_abusesGet: String, CaseIterable {
        case violentorabusive = "violentOrAbusive"
        case hatefulorabusive = "hatefulOrAbusive"
        case spamormisleading = "spamOrMisleading"
        case privacy = "privacy"
        case rights = "rights"
        case serverrules = "serverRules"
        case thumbnails = "thumbnails"
        case captions = "captions"
    }

    /**
     * enum for parameter videoIs
     */
    public enum VideoIs_abusesGet: String, CaseIterable {
        case deleted = "deleted"
        case blacklisted = "blacklisted"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_abusesGet: String, CaseIterable {
        case video = "video"
        case comment = "comment"
        case account = "account"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_abusesGet: String, CaseIterable {
        case id = "-id"
        case createdat = "-createdAt"
        case state = "-state"
    }

    /**
     List abuses
     
     - parameter id: (query) only list the report with this id (optional)
     - parameter predefinedReason: (query) predefined reason the listed reports should contain (optional)
     - parameter search: (query) plain search that will match with video titles, reporter names and more (optional)
     - parameter state: (query)  (optional)
     - parameter searchReporter: (query) only list reports of a specific reporter (optional)
     - parameter searchReportee: (query) only list reports of a specific reportee (optional)
     - parameter searchVideo: (query) only list reports of a specific video (optional)
     - parameter searchVideoChannel: (query) only list reports of a specific video channel (optional)
     - parameter videoIs: (query) only list blacklisted or deleted videos (optional)
     - parameter filter: (query) only list account, comment or video reports (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesGet(id: Int? = nil, predefinedReason: [String]? = nil, search: String? = nil, state: AbuseStateSet? = nil, searchReporter: String? = nil, searchReportee: String? = nil, searchVideo: String? = nil, searchVideoChannel: String? = nil, videoIs: VideoIs_abusesGet? = nil, filter: Filter_abusesGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_abusesGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Abuse]?, _ error: Error?) -> Void)) {
        abusesGetWithRequestBuilder(id: id, predefinedReason: predefinedReason, search: search, state: state, searchReporter: searchReporter, searchReportee: searchReportee, searchVideo: searchVideo, searchVideoChannel: searchVideoChannel, videoIs: videoIs, filter: filter, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List abuses
     - GET /abuses
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) only list the report with this id (optional)
     - parameter predefinedReason: (query) predefined reason the listed reports should contain (optional)
     - parameter search: (query) plain search that will match with video titles, reporter names and more (optional)
     - parameter state: (query)  (optional)
     - parameter searchReporter: (query) only list reports of a specific reporter (optional)
     - parameter searchReportee: (query) only list reports of a specific reportee (optional)
     - parameter searchVideo: (query) only list reports of a specific video (optional)
     - parameter searchVideoChannel: (query) only list reports of a specific video channel (optional)
     - parameter videoIs: (query) only list blacklisted or deleted videos (optional)
     - parameter filter: (query) only list account, comment or video reports (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - returns: RequestBuilder<[Abuse]> 
     */
    open class func abusesGetWithRequestBuilder(id: Int? = nil, predefinedReason: [String]? = nil, search: String? = nil, state: AbuseStateSet? = nil, searchReporter: String? = nil, searchReportee: String? = nil, searchVideo: String? = nil, searchVideoChannel: String? = nil, videoIs: VideoIs_abusesGet? = nil, filter: Filter_abusesGet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_abusesGet? = nil) -> RequestBuilder<[Abuse]> {
        let path = "/abuses"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "predefinedReason": predefinedReason?.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "searchReporter": searchReporter?.encodeToJSON(),
            "searchReportee": searchReportee?.encodeToJSON(),
            "searchVideo": searchVideo?.encodeToJSON(),
            "searchVideoChannel": searchVideoChannel?.encodeToJSON(),
            "videoIs": videoIs?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Abuse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Report an abuse
     
     - parameter inlineObject11: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func abusesPost(inlineObject11: InlineObject11, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        abusesPostWithRequestBuilder(inlineObject11: inlineObject11).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Report an abuse
     - POST /abuses
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter inlineObject11: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func abusesPostWithRequestBuilder(inlineObject11: InlineObject11) -> RequestBuilder<Void> {
        let path = "/abuses"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject11)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_usersMeAbusesGet: String, CaseIterable {
        case id = "-id"
        case createdat = "-createdAt"
        case state = "-state"
    }

    /**
     List my abuses
     
     - parameter id: (query) only list the report with this id (optional)
     - parameter state: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeAbusesGet(id: Int? = nil, state: AbuseStateSet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_usersMeAbusesGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Abuse]?, _ error: Error?) -> Void)) {
        usersMeAbusesGetWithRequestBuilder(id: id, state: state, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List my abuses
     - GET /users/me/abuses
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) only list the report with this id (optional)
     - parameter state: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - returns: RequestBuilder<[Abuse]> 
     */
    open class func usersMeAbusesGetWithRequestBuilder(id: Int? = nil, state: AbuseStateSet? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_usersMeAbusesGet? = nil) -> RequestBuilder<[Abuse]> {
        let path = "/users/me/abuses"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Abuse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
