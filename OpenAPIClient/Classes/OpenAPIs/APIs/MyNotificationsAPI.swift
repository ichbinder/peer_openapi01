//
// MyNotificationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class MyNotificationsAPI {
    /**
     Update my notification settings
     
     - parameter inlineObject3: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeNotificationSettingsPut(inlineObject3: InlineObject3? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        usersMeNotificationSettingsPutWithRequestBuilder(inlineObject3: inlineObject3).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update my notification settings
     - PUT /users/me/notification-settings
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter inlineObject3: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersMeNotificationSettingsPutWithRequestBuilder(inlineObject3: InlineObject3? = nil) -> RequestBuilder<Void> {
        let path = "/users/me/notification-settings"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject3)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List my notifications
     
     - parameter unread: (query) only list unread notifications (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeNotificationsGet(unread: Bool? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationListResponse?, _ error: Error?) -> Void)) {
        usersMeNotificationsGetWithRequestBuilder(unread: unread, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List my notifications
     - GET /users/me/notifications
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter unread: (query) only list unread notifications (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<NotificationListResponse> 
     */
    open class func usersMeNotificationsGetWithRequestBuilder(unread: Bool? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<NotificationListResponse> {
        let path = "/users/me/notifications"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "unread": unread?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<NotificationListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Mark all my notification as read
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeNotificationsReadAllPost(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        usersMeNotificationsReadAllPostWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Mark all my notification as read
     - POST /users/me/notifications/read-all
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - returns: RequestBuilder<Void> 
     */
    open class func usersMeNotificationsReadAllPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/users/me/notifications/read-all"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Mark notifications as read by their id
     
     - parameter inlineObject2: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeNotificationsReadPost(inlineObject2: InlineObject2? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        usersMeNotificationsReadPostWithRequestBuilder(inlineObject2: inlineObject2).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Mark notifications as read by their id
     - POST /users/me/notifications/read
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter inlineObject2: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersMeNotificationsReadPostWithRequestBuilder(inlineObject2: InlineObject2? = nil) -> RequestBuilder<Void> {
        let path = "/users/me/notifications/read"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject2)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
