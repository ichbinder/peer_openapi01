//
// VideoCaptionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoCaptionsAPI {
    /**
     Delete a video caption
     
     - parameter id: (path) The object id or uuid 
     - parameter captionLanguage: (path) The caption language 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCaptionsCaptionLanguageDelete(id: OneOfintegerUUID, captionLanguage: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdCaptionsCaptionLanguageDeleteWithRequestBuilder(id: id, captionLanguage: captionLanguage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a video caption
     - DELETE /videos/{id}/captions/{captionLanguage}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter captionLanguage: (path) The caption language 
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdCaptionsCaptionLanguageDeleteWithRequestBuilder(id: OneOfintegerUUID, captionLanguage: String) -> RequestBuilder<Void> {
        var path = "/videos/{id}/captions/{captionLanguage}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let captionLanguagePreEscape = "\(APIHelper.mapValueToPathItem(captionLanguage))"
        let captionLanguagePostEscape = captionLanguagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captionLanguage}", with: captionLanguagePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add or replace a video caption
     
     - parameter id: (path) The object id or uuid 
     - parameter captionLanguage: (path) The caption language 
     - parameter captionfile: (form) The file to upload. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCaptionsCaptionLanguagePut(id: OneOfintegerUUID, captionLanguage: String, captionfile: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdCaptionsCaptionLanguagePutWithRequestBuilder(id: id, captionLanguage: captionLanguage, captionfile: captionfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or replace a video caption
     - PUT /videos/{id}/captions/{captionLanguage}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter captionLanguage: (path) The caption language 
     - parameter captionfile: (form) The file to upload. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdCaptionsCaptionLanguagePutWithRequestBuilder(id: OneOfintegerUUID, captionLanguage: String, captionfile: URL? = nil) -> RequestBuilder<Void> {
        var path = "/videos/{id}/captions/{captionLanguage}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let captionLanguagePreEscape = "\(APIHelper.mapValueToPathItem(captionLanguage))"
        let captionLanguagePostEscape = captionLanguagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captionLanguage}", with: captionLanguagePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "captionfile": captionfile?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List captions of a video
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCaptionsGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2002?, _ error: Error?) -> Void)) {
        videosIdCaptionsGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List captions of a video
     - GET /videos/{id}/captions
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func videosIdCaptionsGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<InlineResponse2002> {
        var path = "/videos/{id}/captions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
