//
// PluginsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class PluginsAPI {
    /**
     List available plugins
     
     - parameter search: (query)  (optional)
     - parameter pluginType: (query)  (optional)
     - parameter currentPeerTubeEngine: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsAvailableGet(search: String? = nil, pluginType: Int? = nil, currentPeerTubeEngine: String? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PluginResponse?, _ error: Error?) -> Void)) {
        pluginsAvailableGetWithRequestBuilder(search: search, pluginType: pluginType, currentPeerTubeEngine: currentPeerTubeEngine, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available plugins
     - GET /plugins/available
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter search: (query)  (optional)
     - parameter pluginType: (query)  (optional)
     - parameter currentPeerTubeEngine: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<PluginResponse> 
     */
    open class func pluginsAvailableGetWithRequestBuilder(search: String? = nil, pluginType: Int? = nil, currentPeerTubeEngine: String? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<PluginResponse> {
        let path = "/plugins/available"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": search?.encodeToJSON(),
            "pluginType": pluginType?.encodeToJSON(),
            "currentPeerTubeEngine": currentPeerTubeEngine?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PluginResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List plugins
     
     - parameter pluginType: (query)  (optional)
     - parameter uninstalled: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsGet(pluginType: Int? = nil, uninstalled: Bool? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PluginResponse?, _ error: Error?) -> Void)) {
        pluginsGetWithRequestBuilder(pluginType: pluginType, uninstalled: uninstalled, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List plugins
     - GET /plugins
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter pluginType: (query)  (optional)
     - parameter uninstalled: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<PluginResponse> 
     */
    open class func pluginsGetWithRequestBuilder(pluginType: Int? = nil, uninstalled: Bool? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<PluginResponse> {
        let path = "/plugins"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pluginType": pluginType?.encodeToJSON(),
            "uninstalled": uninstalled?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PluginResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Install a plugin
     
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsInstallPost(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        pluginsInstallPostWithRequestBuilder(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Install a plugin
     - POST /plugins/install
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func pluginsInstallPostWithRequestBuilder(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil) -> RequestBuilder<Void> {
        let path = "/plugins/install"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: UNKNOWN_BASE_TYPE)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a plugin
     
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsNpmNameGet(npmName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Plugin?, _ error: Error?) -> Void)) {
        pluginsNpmNameGetWithRequestBuilder(npmName: npmName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a plugin
     - GET /plugins/{npmName}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - returns: RequestBuilder<Plugin> 
     */
    open class func pluginsNpmNameGetWithRequestBuilder(npmName: String) -> RequestBuilder<Plugin> {
        var path = "/plugins/{npmName}"
        let npmNamePreEscape = "\(APIHelper.mapValueToPathItem(npmName))"
        let npmNamePostEscape = npmNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{npmName}", with: npmNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Plugin>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a plugin's public settings
     
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsNpmNamePublicSettingsGet(npmName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String: Any]?, _ error: Error?) -> Void)) {
        pluginsNpmNamePublicSettingsGetWithRequestBuilder(npmName: npmName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a plugin's public settings
     - GET /plugins/{npmName}/public-settings
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - returns: RequestBuilder<[String: Any]> 
     */
    open class func pluginsNpmNamePublicSettingsGetWithRequestBuilder(npmName: String) -> RequestBuilder<[String: Any]> {
        var path = "/plugins/{npmName}/public-settings"
        let npmNamePreEscape = "\(APIHelper.mapValueToPathItem(npmName))"
        let npmNamePostEscape = npmNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{npmName}", with: npmNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String: Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a plugin's registered settings
     
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsNpmNameRegisteredSettingsGet(npmName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String: Any]?, _ error: Error?) -> Void)) {
        pluginsNpmNameRegisteredSettingsGetWithRequestBuilder(npmName: npmName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a plugin's registered settings
     - GET /plugins/{npmName}/registered-settings
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - returns: RequestBuilder<[String: Any]> 
     */
    open class func pluginsNpmNameRegisteredSettingsGetWithRequestBuilder(npmName: String) -> RequestBuilder<[String: Any]> {
        var path = "/plugins/{npmName}/registered-settings"
        let npmNamePreEscape = "\(APIHelper.mapValueToPathItem(npmName))"
        let npmNamePostEscape = npmNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{npmName}", with: npmNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String: Any]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set a plugin's settings
     
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - parameter inlineObject27: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsNpmNameSettingsPut(npmName: String, inlineObject27: InlineObject27? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        pluginsNpmNameSettingsPutWithRequestBuilder(npmName: npmName, inlineObject27: inlineObject27).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set a plugin's settings
     - PUT /plugins/{npmName}/settings
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter npmName: (path) name of the plugin/theme on npmjs.com or in its package.json 
     - parameter inlineObject27: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func pluginsNpmNameSettingsPutWithRequestBuilder(npmName: String, inlineObject27: InlineObject27? = nil) -> RequestBuilder<Void> {
        var path = "/plugins/{npmName}/settings"
        let npmNamePreEscape = "\(APIHelper.mapValueToPathItem(npmName))"
        let npmNamePostEscape = npmNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{npmName}", with: npmNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject27)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Uninstall a plugin
     
     - parameter inlineObject26: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsUninstallPost(inlineObject26: InlineObject26? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        pluginsUninstallPostWithRequestBuilder(inlineObject26: inlineObject26).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Uninstall a plugin
     - POST /plugins/uninstall
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter inlineObject26: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func pluginsUninstallPostWithRequestBuilder(inlineObject26: InlineObject26? = nil) -> RequestBuilder<Void> {
        let path = "/plugins/uninstall"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject26)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update a plugin
     
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pluginsUpdatePost(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        pluginsUpdatePostWithRequestBuilder(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a plugin
     - POST /plugins/update
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func pluginsUpdatePostWithRequestBuilder(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil) -> RequestBuilder<Void> {
        let path = "/plugins/update"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: UNKNOWN_BASE_TYPE)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
