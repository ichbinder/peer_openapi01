//
// VideoPlaylistsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoPlaylistsAPI {
    /**
     Check video exists in my playlists
     
     - parameter videoIds: (query) The video ids to check 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeVideoPlaylistsVideosExistGet(videoIds: [Int], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2007?, _ error: Error?) -> Void)) {
        usersMeVideoPlaylistsVideosExistGetWithRequestBuilder(videoIds: videoIds).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check video exists in my playlists
     - GET /users/me/video-playlists/videos-exist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter videoIds: (query) The video ids to check 
     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func usersMeVideoPlaylistsVideosExistGetWithRequestBuilder(videoIds: [Int]) -> RequestBuilder<InlineResponse2007> {
        let path = "/users/me/video-playlists/videos-exist"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "videoIds": videoIds.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List video playlists
     
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsGet(start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2004?, _ error: Error?) -> Void)) {
        videoPlaylistsGetWithRequestBuilder(start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List video playlists
     - GET /video-playlists
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func videoPlaylistsGetWithRequestBuilder(start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/video-playlists"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete a video playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdDelete(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videoPlaylistsIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a video playlist
     - DELETE /video-playlists/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<Void> 
     */
    open class func videoPlaylistsIdDeleteWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<Void> {
        var path = "/video-playlists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a video playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoPlaylist?, _ error: Error?) -> Void)) {
        videoPlaylistsIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a video playlist
     - GET /video-playlists/{id}
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<VideoPlaylist> 
     */
    open class func videoPlaylistsIdGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<VideoPlaylist> {
        var path = "/video-playlists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoPlaylist>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update a video playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter displayName: (form) Video playlist display name (optional)
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdPut(id: OneOfintegerUUID, displayName: String? = nil, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videoPlaylistsIdPutWithRequestBuilder(id: id, displayName: displayName, thumbnailfile: thumbnailfile, privacy: privacy, description: description, videoChannelId: videoChannelId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a video playlist
     - PUT /video-playlists/{id}
     - If the video playlist is set as public, the playlist must have a assigned channel.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter displayName: (form) Video playlist display name (optional)
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videoPlaylistsIdPutWithRequestBuilder(id: OneOfintegerUUID, displayName: String? = nil, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/video-playlists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "displayName": displayName?.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "videoChannelId": videoChannelId?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List videos of a playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdVideosGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoListResponse?, _ error: Error?) -> Void)) {
        videoPlaylistsIdVideosGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List videos of a playlist
     - GET /video-playlists/{id}/videos
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func videoPlaylistsIdVideosGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<VideoListResponse> {
        var path = "/video-playlists/{id}/videos"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an element from a playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdVideosPlaylistElementIdDelete(id: OneOfintegerUUID, playlistElementId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videoPlaylistsIdVideosPlaylistElementIdDeleteWithRequestBuilder(id: id, playlistElementId: playlistElementId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an element from a playlist
     - DELETE /video-playlists/{id}/videos/{playlistElementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter playlistElementId: (path) Playlist element id 
     - returns: RequestBuilder<Void> 
     */
    open class func videoPlaylistsIdVideosPlaylistElementIdDeleteWithRequestBuilder(id: OneOfintegerUUID, playlistElementId: Int) -> RequestBuilder<Void> {
        var path = "/video-playlists/{id}/videos/{playlistElementId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let playlistElementIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistElementId))"
        let playlistElementIdPostEscape = playlistElementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playlistElementId}", with: playlistElementIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update a playlist element
     
     - parameter id: (path) The object id or uuid 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter inlineObject19: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdVideosPlaylistElementIdPut(id: OneOfintegerUUID, playlistElementId: Int, inlineObject19: InlineObject19? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videoPlaylistsIdVideosPlaylistElementIdPutWithRequestBuilder(id: id, playlistElementId: playlistElementId, inlineObject19: inlineObject19).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a playlist element
     - PUT /video-playlists/{id}/videos/{playlistElementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter inlineObject19: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videoPlaylistsIdVideosPlaylistElementIdPutWithRequestBuilder(id: OneOfintegerUUID, playlistElementId: Int, inlineObject19: InlineObject19? = nil) -> RequestBuilder<Void> {
        var path = "/video-playlists/{id}/videos/{playlistElementId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let playlistElementIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistElementId))"
        let playlistElementIdPostEscape = playlistElementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playlistElementId}", with: playlistElementIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject19)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add a video in a playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter inlineObject17: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdVideosPost(id: OneOfintegerUUID, inlineObject17: InlineObject17? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2006?, _ error: Error?) -> Void)) {
        videoPlaylistsIdVideosPostWithRequestBuilder(id: id, inlineObject17: inlineObject17).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a video in a playlist
     - POST /video-playlists/{id}/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter inlineObject17: (body)  (optional)
     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func videoPlaylistsIdVideosPostWithRequestBuilder(id: OneOfintegerUUID, inlineObject17: InlineObject17? = nil) -> RequestBuilder<InlineResponse2006> {
        var path = "/video-playlists/{id}/videos"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject17)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Reorder a playlist
     
     - parameter id: (path) The object id or uuid 
     - parameter inlineObject18: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsIdVideosReorderPost(id: OneOfintegerUUID, inlineObject18: InlineObject18? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videoPlaylistsIdVideosReorderPostWithRequestBuilder(id: id, inlineObject18: inlineObject18).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reorder a playlist
     - POST /video-playlists/{id}/videos/reorder
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter inlineObject18: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videoPlaylistsIdVideosReorderPostWithRequestBuilder(id: OneOfintegerUUID, inlineObject18: InlineObject18? = nil) -> RequestBuilder<Void> {
        var path = "/video-playlists/{id}/videos/reorder"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject18)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create a video playlist
     
     - parameter displayName: (form) Video playlist display name 
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsPost(displayName: String, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2005?, _ error: Error?) -> Void)) {
        videoPlaylistsPostWithRequestBuilder(displayName: displayName, thumbnailfile: thumbnailfile, privacy: privacy, description: description, videoChannelId: videoChannelId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a video playlist
     - POST /video-playlists
     - If the video playlist is set as public, the videoChannelId is mandatory.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter displayName: (form) Video playlist display name 
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form) Video channel in which the playlist will be published (optional)
     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func videoPlaylistsPostWithRequestBuilder(displayName: String, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil) -> RequestBuilder<InlineResponse2005> {
        let path = "/video-playlists"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "displayName": displayName.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "videoChannelId": videoChannelId?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List available playlist privacies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoPlaylistsPrivaciesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        videoPlaylistsPrivaciesGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available playlist privacies
     - GET /video-playlists/privacies
     - returns: RequestBuilder<[String]> 
     */
    open class func videoPlaylistsPrivaciesGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/video-playlists/privacies"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
