//
// InstanceRedundancyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class InstanceRedundancyAPI {
    /**
     Update a server redundancy policy
     
     - parameter host: (path) server domain to mirror 
     - parameter inlineObject24: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func redundancyHostPut(host: String, inlineObject24: InlineObject24? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        redundancyHostPutWithRequestBuilder(host: host, inlineObject24: inlineObject24).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a server redundancy policy
     - PUT /redundancy/{host}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter host: (path) server domain to mirror 
     - parameter inlineObject24: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func redundancyHostPutWithRequestBuilder(host: String, inlineObject24: InlineObject24? = nil) -> RequestBuilder<Void> {
        var path = "/redundancy/{host}"
        let hostPreEscape = "\(APIHelper.mapValueToPathItem(host))"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject24)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
