//
// LiveVideosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class LiveVideosAPI {
    /**
     Get a live information
     
     - parameter id: (path) The object id or uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLiveIdGet(id: OneOfintegerUUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveVideoResponse?, _ error: Error?) -> Void)) {
        videosLiveIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a live information
     - GET /videos/live/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - returns: RequestBuilder<LiveVideoResponse> 
     */
    open class func videosLiveIdGetWithRequestBuilder(id: OneOfintegerUUID) -> RequestBuilder<LiveVideoResponse> {
        var path = "/videos/live/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LiveVideoResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update a live information
     
     - parameter id: (path) The object id or uuid 
     - parameter liveVideoUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLiveIdPut(id: OneOfintegerUUID, liveVideoUpdate: LiveVideoUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosLiveIdPutWithRequestBuilder(id: id, liveVideoUpdate: liveVideoUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a live information
     - PUT /videos/live/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter liveVideoUpdate: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func videosLiveIdPutWithRequestBuilder(id: OneOfintegerUUID, liveVideoUpdate: LiveVideoUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/videos/live/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveVideoUpdate)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create a live
     
     - parameter channelId: (form) Channel id that will contain this live video 
     - parameter name: (form) Live video/replay name 
     - parameter saveReplay: (form)  (optional)
     - parameter permanentLive: (form) User can stream multiple times in a permanent live (optional)
     - parameter thumbnailfile: (form) Live video/replay thumbnail file (optional)
     - parameter previewfile: (form) Live video/replay preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Live video/replay category (optional)
     - parameter licence: (form) Live video/replay licence (optional)
     - parameter language: (form) Live video/replay language (optional)
     - parameter description: (form) Live video/replay description (optional)
     - parameter support: (form) A text tell the audience how to support the creator (optional)
     - parameter nsfw: (form) Whether or not this live video/replay contains sensitive content (optional)
     - parameter tags: (form) Live video/replay tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this live video/replay (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for the replay of this live (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosLivePost(channelId: Int, name: String, saveReplay: Bool? = nil, permanentLive: Bool? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: String? = nil, licence: String? = nil, language: String? = nil, description: String? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoUploadResponse?, _ error: Error?) -> Void)) {
        videosLivePostWithRequestBuilder(channelId: channelId, name: name, saveReplay: saveReplay, permanentLive: permanentLive, thumbnailfile: thumbnailfile, previewfile: previewfile, privacy: privacy, category: category, licence: licence, language: language, description: description, support: support, nsfw: nsfw, tags: tags, commentsEnabled: commentsEnabled, downloadEnabled: downloadEnabled).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a live
     - POST /videos/live
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter channelId: (form) Channel id that will contain this live video 
     - parameter name: (form) Live video/replay name 
     - parameter saveReplay: (form)  (optional)
     - parameter permanentLive: (form) User can stream multiple times in a permanent live (optional)
     - parameter thumbnailfile: (form) Live video/replay thumbnail file (optional)
     - parameter previewfile: (form) Live video/replay preview file (optional)
     - parameter privacy: (form)  (optional)
     - parameter category: (form) Live video/replay category (optional)
     - parameter licence: (form) Live video/replay licence (optional)
     - parameter language: (form) Live video/replay language (optional)
     - parameter description: (form) Live video/replay description (optional)
     - parameter support: (form) A text tell the audience how to support the creator (optional)
     - parameter nsfw: (form) Whether or not this live video/replay contains sensitive content (optional)
     - parameter tags: (form) Live video/replay tags (maximum 5 tags each between 2 and 30 characters) (optional)
     - parameter commentsEnabled: (form) Enable or disable comments for this live video/replay (optional)
     - parameter downloadEnabled: (form) Enable or disable downloading for the replay of this live (optional)
     - returns: RequestBuilder<VideoUploadResponse> 
     */
    open class func videosLivePostWithRequestBuilder(channelId: Int, name: String, saveReplay: Bool? = nil, permanentLive: Bool? = nil, thumbnailfile: URL? = nil, previewfile: URL? = nil, privacy: VideoPrivacySet? = nil, category: String? = nil, licence: String? = nil, language: String? = nil, description: String? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil) -> RequestBuilder<VideoUploadResponse> {
        let path = "/videos/live"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "channelId": channelId.encodeToJSON(),
            "saveReplay": saveReplay?.encodeToJSON(),
            "permanentLive": permanentLive?.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "previewfile": previewfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "category": category?.encodeToJSON(),
            "licence": licence?.encodeToJSON(),
            "language": language?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "support": support?.encodeToJSON(),
            "nsfw": nsfw?.encodeToJSON(),
            "name": name.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
            "commentsEnabled": commentsEnabled?.encodeToJSON(),
            "downloadEnabled": downloadEnabled?.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoUploadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
