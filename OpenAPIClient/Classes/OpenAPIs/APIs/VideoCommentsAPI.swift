//
// VideoCommentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class VideoCommentsAPI {
    /**
     * enum for parameter sort
     */
    public enum Sort_videosIdCommentThreadsGet: String, CaseIterable {
        case createdat = "-createdAt"
        case totalreplies = "-totalReplies"
    }

    /**
     List threads of a video
     
     - parameter id: (path) The object id or uuid 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort comments by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCommentThreadsGet(id: OneOfintegerUUID, start: Int? = nil, count: Int? = nil, sort: Sort_videosIdCommentThreadsGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentThreadResponse?, _ error: Error?) -> Void)) {
        videosIdCommentThreadsGetWithRequestBuilder(id: id, start: start, count: count, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List threads of a video
     - GET /videos/{id}/comment-threads
     - parameter id: (path) The object id or uuid 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort comments by criteria (optional)
     - returns: RequestBuilder<CommentThreadResponse> 
     */
    open class func videosIdCommentThreadsGetWithRequestBuilder(id: OneOfintegerUUID, start: Int? = nil, count: Int? = nil, sort: Sort_videosIdCommentThreadsGet? = nil) -> RequestBuilder<CommentThreadResponse> {
        var path = "/videos/{id}/comment-threads"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommentThreadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create a thread
     
     - parameter id: (path) The object id or uuid 
     - parameter inlineObject20: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCommentThreadsPost(id: OneOfintegerUUID, inlineObject20: InlineObject20? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentThreadPostResponse?, _ error: Error?) -> Void)) {
        videosIdCommentThreadsPostWithRequestBuilder(id: id, inlineObject20: inlineObject20).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a thread
     - POST /videos/{id}/comment-threads
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter inlineObject20: (body)  (optional)
     - returns: RequestBuilder<CommentThreadPostResponse> 
     */
    open class func videosIdCommentThreadsPostWithRequestBuilder(id: OneOfintegerUUID, inlineObject20: InlineObject20? = nil) -> RequestBuilder<CommentThreadPostResponse> {
        var path = "/videos/{id}/comment-threads"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject20)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommentThreadPostResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a thread
     
     - parameter id: (path) The object id or uuid 
     - parameter threadId: (path) The thread id (root comment id) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCommentThreadsThreadIdGet(id: OneOfintegerUUID, threadId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoCommentThreadTree?, _ error: Error?) -> Void)) {
        videosIdCommentThreadsThreadIdGetWithRequestBuilder(id: id, threadId: threadId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a thread
     - GET /videos/{id}/comment-threads/{threadId}
     - parameter id: (path) The object id or uuid 
     - parameter threadId: (path) The thread id (root comment id) 
     - returns: RequestBuilder<VideoCommentThreadTree> 
     */
    open class func videosIdCommentThreadsThreadIdGetWithRequestBuilder(id: OneOfintegerUUID, threadId: Int) -> RequestBuilder<VideoCommentThreadTree> {
        var path = "/videos/{id}/comment-threads/{threadId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{threadId}", with: threadIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoCommentThreadTree>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete a comment or a reply
     
     - parameter id: (path) The object id or uuid 
     - parameter commentId: (path) The comment id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCommentsCommentIdDelete(id: OneOfintegerUUID, commentId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        videosIdCommentsCommentIdDeleteWithRequestBuilder(id: id, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a comment or a reply
     - DELETE /videos/{id}/comments/{commentId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter commentId: (path) The comment id 
     - returns: RequestBuilder<Void> 
     */
    open class func videosIdCommentsCommentIdDeleteWithRequestBuilder(id: OneOfintegerUUID, commentId: Int) -> RequestBuilder<Void> {
        var path = "/videos/{id}/comments/{commentId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Reply to a thread of a video
     
     - parameter id: (path) The object id or uuid 
     - parameter commentId: (path) The comment id 
     - parameter inlineObject21: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdCommentsCommentIdPost(id: OneOfintegerUUID, commentId: Int, inlineObject21: InlineObject21? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentThreadPostResponse?, _ error: Error?) -> Void)) {
        videosIdCommentsCommentIdPostWithRequestBuilder(id: id, commentId: commentId, inlineObject21: inlineObject21).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reply to a thread of a video
     - POST /videos/{id}/comments/{commentId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id or uuid 
     - parameter commentId: (path) The comment id 
     - parameter inlineObject21: (body)  (optional)
     - returns: RequestBuilder<CommentThreadPostResponse> 
     */
    open class func videosIdCommentsCommentIdPostWithRequestBuilder(id: OneOfintegerUUID, commentId: Int, inlineObject21: InlineObject21? = nil) -> RequestBuilder<CommentThreadPostResponse> {
        var path = "/videos/{id}/comments/{commentId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject21)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommentThreadPostResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
